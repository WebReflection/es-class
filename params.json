{"name":"Es-class","tagline":"ECMAScript 3 to 6 compatible Class definition","body":"es-class\r\n========\r\n\r\n[![build status](https://secure.travis-ci.org/WebReflection/es-class.png)](http://travis-ci.org/WebReflection/es-class)\r\n\r\n\r\n### A future proof, backward compatible, JavaScript class utility.\r\n\r\n  * **ES6** and **ES7** friendly, through semantic `extends` and `constructor` plus other features\r\n  * **ES5** natively compatible granting that what you write is what you get\r\n  * **ES3** backward compatible, thanks to common minifiers that will make production code safe\r\n\r\nFeel free to [test all features](http://webreflection.github.io/es-class/test/) related to this project, and please come back if your browser is not green.\r\n\r\n\r\n\r\n### Compatibility\r\n\r\nFollowing a list of tested browsers split in Desktop and Mobile.\r\n\r\n#### Desktop\r\n\r\n  * Chrome\r\n  * Firefox\r\n  * IE 6 or greater\r\n  * Safari\r\n  * Opera\r\n\r\n#### Mobile\r\n\r\n  * Android 2 or greater\r\n  * iOS 5 or greater\r\n  * IE9 Mobile or greater\r\n  * Bada\r\n  * Kindle Fire\r\n  * Xpress\r\n  * Opera Mini and Mobile\r\n\r\n\r\n\r\n### Features\r\nAll features explained in the [dedicated page](https://github.com/WebReflection/es-class/blob/master/FEATURES.md).\r\n\r\nFollowing a summary:\r\n\r\n  * [constructor](https://github.com/WebReflection/es-class/blob/master/FEATURES.md#constructor) to optionally define the implicit initializer per each instance\r\n  * [extends](https://github.com/WebReflection/es-class/blob/master/FEATURES.md#extends) to optionally define a class or an object to inherit from\r\n  * [super](https://github.com/WebReflection/es-class/blob/master/FEATURES.md#super) to shortcut super methods invocation\r\n  * [with](https://github.com/WebReflection/es-class/blob/master/FEATURES.md#with) to attach lightweight traits / mixins enabling composition behind optional initializers per each mixin\r\n  * [static](https://github.com/WebReflection/es-class/blob/master/FEATURES.md#static) to define public static class constants, inherited if extended, without ever polluting the prototype\r\n  * [implements](https://github.com/WebReflection/es-class/blob/master/FEATURES.md#implements) to perform light checks over expected implementations and warn eventually when something is missing\r\n\r\nThis is an example of what's possible:\r\n```js\r\nvar Engineer = Class({\r\n  constructor: function (name, age, type) {\r\n    this.super(name, age);\r\n    this.type = type;\r\n  },\r\n  extends: Person,\r\n  with: [\r\n    eventEmitter,\r\n    growingEachYear,\r\n    carrierPath\r\n  ],\r\n  static: {\r\n    SOFTWARE: 0,\r\n    CONSTRUCTIONS: 1\r\n  },\r\n  implements: [\r\n    iWorker\r\n  ]\r\n});\r\n\r\nvar me = new Engineer(\r\n  'Mr. Andrea Giammarchi',\r\n  36,\r\n  Engineer.SOFTWARE\r\n);\r\n\r\nme instanceof Person; // true\r\nme.type;              // Engineer.SOFTWARE\r\n\r\nme.emit('work:start', {\r\n  tasks: ['do this', 'do that']\r\n});\r\n```\r\n\r\n\r\n\r\n### License\r\n[MIT Style License](LICENSE.txt)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}